diff --git a/extension/httpfs/create_secret_functions.cpp b/extension/httpfs/create_secret_functions.cpp
index b3984b3..476bc14 100644
--- a/extension/httpfs/create_secret_functions.cpp
+++ b/extension/httpfs/create_secret_functions.cpp
@@ -1,15 +1,15 @@
 #include "create_secret_functions.hpp"
 #include "s3fs.hpp"
-#include "duckdb/main/extension_util.hpp"
+#include "duckdb/main/extension/extension_loader.hpp"
 #include "duckdb/common/local_file_system.hpp"
 
 namespace duckdb {
 
-void CreateS3SecretFunctions::Register(DatabaseInstance &instance) {
-	RegisterCreateSecretFunction(instance, "s3");
-	RegisterCreateSecretFunction(instance, "aws");
-	RegisterCreateSecretFunction(instance, "r2");
-	RegisterCreateSecretFunction(instance, "gcs");
+void CreateS3SecretFunctions::Register(ExtensionLoader &loader) {
+	RegisterCreateSecretFunction(loader, "s3");
+	RegisterCreateSecretFunction(loader, "aws");
+	RegisterCreateSecretFunction(loader, "r2");
+	RegisterCreateSecretFunction(loader, "gcs");
 }
 
 static Value MapToStruct(const Value &map) {
@@ -205,7 +205,7 @@ void CreateS3SecretFunctions::SetBaseNamedParams(CreateSecretFunction &function,
 	}
 }
 
-void CreateS3SecretFunctions::RegisterCreateSecretFunction(DatabaseInstance &instance, string type) {
+void CreateS3SecretFunctions::RegisterCreateSecretFunction(ExtensionLoader &loader, string type) {
 	// Register the new type
 	SecretType secret_type;
 	secret_type.name = type;
@@ -213,31 +213,31 @@ void CreateS3SecretFunctions::RegisterCreateSecretFunction(DatabaseInstance &ins
 	secret_type.default_provider = "config";
 	secret_type.extension = "httpfs";
 
-	ExtensionUtil::RegisterSecretType(instance, secret_type);
+	loader.RegisterSecretType(secret_type);
 
 	CreateSecretFunction from_empty_config_fun2 = {type, "config", CreateS3SecretFromConfig};
 	SetBaseNamedParams(from_empty_config_fun2, type);
-	ExtensionUtil::RegisterFunction(instance, from_empty_config_fun2);
+	loader.RegisterFunction(from_empty_config_fun2);
 }
 
-void CreateBearerTokenFunctions::Register(DatabaseInstance &instance) {
+void CreateBearerTokenFunctions::Register(ExtensionLoader &loader) {
 	// HuggingFace secret
 	SecretType secret_type_hf;
 	secret_type_hf.name = HUGGINGFACE_TYPE;
 	secret_type_hf.deserializer = KeyValueSecret::Deserialize<KeyValueSecret>;
 	secret_type_hf.default_provider = "config";
 	secret_type_hf.extension = "httpfs";
-	ExtensionUtil::RegisterSecretType(instance, secret_type_hf);
+	loader.RegisterSecretType(secret_type_hf);
 
 	// Huggingface config provider
 	CreateSecretFunction hf_config_fun = {HUGGINGFACE_TYPE, "config", CreateBearerSecretFromConfig};
 	hf_config_fun.named_parameters["token"] = LogicalType::VARCHAR;
-	ExtensionUtil::RegisterFunction(instance, hf_config_fun);
+	loader.RegisterFunction(hf_config_fun);
 
 	// Huggingface credential_chain provider
 	CreateSecretFunction hf_cred_fun = {HUGGINGFACE_TYPE, "credential_chain",
 	                                    CreateHuggingFaceSecretFromCredentialChain};
-	ExtensionUtil::RegisterFunction(instance, hf_cred_fun);
+	loader.RegisterFunction(hf_cred_fun);
 }
 
 unique_ptr<BaseSecret> CreateBearerTokenFunctions::CreateSecretFunctionInternal(ClientContext &context,
diff --git a/extension/httpfs/crypto.cpp b/extension/httpfs/crypto.cpp
index 04bd795..0fe6be8 100644
--- a/extension/httpfs/crypto.cpp
+++ b/extension/httpfs/crypto.cpp
@@ -78,20 +78,34 @@ void AESStateSSL::GenerateRandomData(data_ptr_t data, idx_t len) {
 	RAND_bytes(data, len);
 }
 
-void AESStateSSL::InitializeEncryption(const_data_ptr_t iv, idx_t iv_len, const string *key) {
+void AESStateSSL::InitializeEncryption(const_data_ptr_t iv, idx_t iv_len, const string *key, const_data_ptr_t aad, idx_t aad_len) {
 	mode = ENCRYPT;
 
 	if (1 != EVP_EncryptInit_ex(context, GetCipher(*key), NULL, const_data_ptr_cast(key->data()), iv)) {
 		throw InternalException("EncryptInit failed");
 	}
+	
+	int len;
+	if (aad_len > 0){
+		if (!EVP_DecryptUpdate(context, NULL, &len, aad, aad_len)) {
+    			throw InternalException("Setting Additional Authenticated Data  failed");
+		}
+	}	
 }
 
-void AESStateSSL::InitializeDecryption(const_data_ptr_t iv, idx_t iv_len, const string *key) {
+void AESStateSSL::InitializeDecryption(const_data_ptr_t iv, idx_t iv_len, const string *key, const_data_ptr_t aad, idx_t aad_len) {
 	mode = DECRYPT;
 
 	if (1 != EVP_DecryptInit_ex(context, GetCipher(*key), NULL, const_data_ptr_cast(key->data()), iv)) {
 		throw InternalException("DecryptInit failed");
 	}
+
+	int len;
+        if (aad_len > 0){
+                if (!EVP_DecryptUpdate(context, NULL, &len, aad, aad_len)) {
+                        throw InternalException("Setting Additional Authenticated Data  failed");
+                }
+	}
 }
 
 size_t AESStateSSL::Process(const_data_ptr_t in, idx_t in_len, data_ptr_t out, idx_t out_len) {
diff --git a/extension/httpfs/httpfs_extension.cpp b/extension/httpfs/httpfs_extension.cpp
index c9bc985..c800ff2 100644
--- a/extension/httpfs/httpfs_extension.cpp
+++ b/extension/httpfs/httpfs_extension.cpp
@@ -1,5 +1,3 @@
-#define DUCKDB_EXTENSION_MAIN
-
 #include "httpfs_extension.hpp"
 
 #include "create_secret_functions.hpp"
@@ -10,7 +8,8 @@
 
 namespace duckdb {
 
-static void LoadInternal(DatabaseInstance &instance) {
+static void LoadInternal(ExtensionLoader &loader) {
+	auto &instance = loader.GetDatabaseInstance();
 	auto &fs = instance.GetFileSystem();
 
 	fs.RegisterSubSystem(make_uniq<HTTPFileSystem>());
@@ -66,14 +65,14 @@ static void LoadInternal(DatabaseInstance &instance) {
 	auto provider = make_uniq<AWSEnvironmentCredentialsProvider>(config);
 	provider->SetAll();
 
-	CreateS3SecretFunctions::Register(instance);
-	CreateBearerTokenFunctions::Register(instance);
+	CreateS3SecretFunctions::Register(loader);
+	CreateBearerTokenFunctions::Register(loader);
 
 	// set pointer to OpenSSL encryption state
 	config.encryption_util = make_shared_ptr<AESStateSSLFactory>();
 }
-void HttpfsExtension::Load(DuckDB &db) {
-	LoadInternal(*db.instance);
+void HttpfsExtension::Load(ExtensionLoader &loader) {
+	LoadInternal(loader);
 }
 std::string HttpfsExtension::Name() {
 	return "httpfs";
@@ -91,15 +90,8 @@ std::string HttpfsExtension::Version() const {
 
 extern "C" {
 
-DUCKDB_EXTENSION_API void httpfs_init(duckdb::DatabaseInstance &db) {
-	LoadInternal(db);
+DUCKDB_CPP_EXTENSION_ENTRY(httpfs, loader) {
+	duckdb::LoadInternal(loader);
 }
 
-DUCKDB_EXTENSION_API const char *httpfs_version() {
-	return duckdb::DuckDB::LibraryVersion();
-}
 }
-
-#ifndef DUCKDB_EXTENSION_MAIN
-#error DUCKDB_EXTENSION_MAIN not defined
-#endif
diff --git a/extension/httpfs/include/create_secret_functions.hpp b/extension/httpfs/include/create_secret_functions.hpp
index 54b7566..bd3bc4a 100644
--- a/extension/httpfs/include/create_secret_functions.hpp
+++ b/extension/httpfs/include/create_secret_functions.hpp
@@ -8,11 +8,12 @@ struct S3AuthParams;
 class CreateSecretFunction;
 class BaseSecret;
 struct SecretEntry;
+class ExtensionLoader;
 
 struct CreateS3SecretFunctions {
 public:
 	//! Register all CreateSecretFunctions
-	static void Register(DatabaseInstance &instance);
+	static void Register(ExtensionLoader &loader);
 
 	//! Secret refreshing mechanisms
 	static CreateSecretInput GenerateRefreshSecretInfo(const SecretEntry &secret_entry, Value &refresh_info);
@@ -30,7 +31,7 @@ protected:
 	//! Helper function to set named params of secret function
 	static void SetBaseNamedParams(CreateSecretFunction &function, string &type);
 	//! Helper function to create secret types s3/r2/gcs
-	static void RegisterCreateSecretFunction(DatabaseInstance &instance, string type);
+	static void RegisterCreateSecretFunction(ExtensionLoader &loader, string type);
 };
 
 struct CreateBearerTokenFunctions {
@@ -38,7 +39,7 @@ public:
 	static constexpr const char *HUGGINGFACE_TYPE = "huggingface";
 
 	//! Register all CreateSecretFunctions
-	static void Register(DatabaseInstance &instance);
+	static void Register(ExtensionLoader &loader);
 
 protected:
 	//! Internal function to create bearer token
diff --git a/extension/httpfs/include/crypto.hpp b/extension/httpfs/include/crypto.hpp
index f819356..eaa850e 100644
--- a/extension/httpfs/include/crypto.hpp
+++ b/extension/httpfs/include/crypto.hpp
@@ -29,8 +29,8 @@ public:
 	~AESStateSSL() override;
 
 public:
-	void InitializeEncryption(const_data_ptr_t iv, idx_t iv_len, const std::string *key) override;
-	void InitializeDecryption(const_data_ptr_t iv, idx_t iv_len, const std::string *key) override;
+	void InitializeEncryption(const_data_ptr_t iv, idx_t iv_len, const std::string *key, const_data_ptr_t aad, idx_t aad_len) override;
+	void InitializeDecryption(const_data_ptr_t iv, idx_t iv_len, const std::string *key, const_data_ptr_t aad, idx_t aad_len) override;
 	size_t Process(const_data_ptr_t in, idx_t in_len, data_ptr_t out, idx_t out_len) override;
 	size_t Finalize(data_ptr_t out, idx_t out_len, data_ptr_t tag, idx_t tag_len) override;
 	void GenerateRandomData(data_ptr_t data, idx_t len) override;
diff --git a/extension/httpfs/include/httpfs_extension.hpp b/extension/httpfs/include/httpfs_extension.hpp
index 3c4f3a1..eeca2c9 100644
--- a/extension/httpfs/include/httpfs_extension.hpp
+++ b/extension/httpfs/include/httpfs_extension.hpp
@@ -6,7 +6,7 @@ namespace duckdb {
 
 class HttpfsExtension : public Extension {
 public:
-	void Load(DuckDB &db) override;
+	void Load(ExtensionLoader &loader) override;
 	std::string Name() override;
 	std::string Version() const override;
 };
